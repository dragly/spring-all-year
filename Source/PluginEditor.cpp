/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
JuceDemoPluginAudioProcessorEditor::JuceDemoPluginAudioProcessorEditor (JuceDemoPluginAudioProcessor& owner)
    : AudioProcessorEditor (owner),
      midiKeyboard (owner.keyboardState, MidiKeyboardComponent::horizontalKeyboard),
      infoLabel (String::empty),
      offsetLabel ("", "Offset:"),
      lennardLabel ("", "Spring constant:"),
      offsetSlider ("offset"),
      springConstantSlider ("spring"),
      velocitySlider ("velocity")
{
    // add some sliders..
    addAndMakeVisible (offsetSlider);
    offsetSlider.setSliderStyle (Slider::Rotary);
    offsetSlider.addListener (this);
    offsetSlider.setRange (0.0, 10.0, 0.01);

    addAndMakeVisible (springConstantSlider);
    springConstantSlider.setSliderStyle (Slider::Rotary);
    springConstantSlider.addListener (this);
    springConstantSlider.setRange (0.01, 2.0, 0.001);

    addAndMakeVisible (velocitySlider);
    velocitySlider.setSliderStyle (Slider::Rotary);
    velocitySlider.addListener (this);
    velocitySlider.setRange (0.90, 1.0 - 0.0001, 0.0001);

    // add some labels for the sliders..
    offsetLabel.attachToComponent (&offsetSlider, false);
    offsetLabel.setFont (Font (11.0f));

    lennardLabel.attachToComponent (&springConstantSlider, false);
    lennardLabel.setFont (Font (11.0f));

    // add the midi keyboard component..
    addAndMakeVisible (midiKeyboard);

    // add a label that will display the current timecode and status..
    addAndMakeVisible (infoLabel);
    infoLabel.setColour (Label::textColourId, Colours::blue);

    // add the triangular resizer component for the bottom-right of the UI
    addAndMakeVisible (resizer = new ResizableCornerComponent (this, &resizeLimits));
    resizeLimits.setSizeLimits (150, 150, 1000, 600);

    // set our component's initial size to be the last one that was stored in the filter's settings
    setSize (owner.lastUIWidth,
             owner.lastUIHeight);

    startTimer (50);
}

JuceDemoPluginAudioProcessorEditor::~JuceDemoPluginAudioProcessorEditor()
{
}

//==============================================================================
void JuceDemoPluginAudioProcessorEditor::paint (Graphics& g)
{
    g.setGradientFill (ColourGradient (Colours::white, 0, 0,
                                       Colours::grey, 0, (float) getHeight(), false));
    g.fillAll();
}

void JuceDemoPluginAudioProcessorEditor::resized()
{
    infoLabel.setBounds (10, 4, 600, 25);
    offsetSlider.setBounds (20, 60, 150, 40);
    springConstantSlider.setBounds (200, 60, 150, 40);
    velocitySlider.setBounds (400, 60, 150, 40);

    const int keyboardHeight = 70;
    midiKeyboard.setBounds (4, getHeight() - keyboardHeight - 4, getWidth() - 8, keyboardHeight);

    resizer->setBounds (getWidth() - 16, getHeight() - 16, 16, 16);

    getProcessor().lastUIWidth = getWidth();
    getProcessor().lastUIHeight = getHeight();
}

//==============================================================================
// This timer periodically checks whether any of the filter's parameters have changed...
void JuceDemoPluginAudioProcessorEditor::timerCallback()
{
    JuceDemoPluginAudioProcessor& ourProcessor = getProcessor();

    offsetSlider.setValue (ourProcessor.offset->getValue(), dontSendNotification);
    springConstantSlider.setValue (ourProcessor.springConstant->getValue(), dontSendNotification);
    velocitySlider.setValue (ourProcessor.velocityFactor->getValue(), dontSendNotification);
}

// This is our Slider::Listener callback, when the user drags a slider.
void JuceDemoPluginAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        // It's vital to use setValueNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        param->setValueNotifyingHost ((float) slider->getValue());
    }
}

void JuceDemoPluginAudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->beginChangeGesture();
    }
}

void JuceDemoPluginAudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->endChangeGesture();
    }
}

AudioProcessorParameter* JuceDemoPluginAudioProcessorEditor::getParameterFromSlider (const Slider* slider) const
{
    if (slider == &offsetSlider)
        return getProcessor().offset;

    if (slider == &springConstantSlider)
        return getProcessor().springConstant;

    if (slider == &velocitySlider)
        return getProcessor().velocityFactor;

    return nullptr;
}
